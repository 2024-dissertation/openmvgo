// Code generated by MockGen. DO NOT EDIT.
// Source: ./openmvg.go
//
// Generated by this command:
//
//	mockgen -source=./openmvg.go -destination=../../mocks/mock_openmvg.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenMVGServiceInterface is a mock of OpenMVGServiceInterface interface.
type MockOpenMVGServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenMVGServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockOpenMVGServiceInterfaceMockRecorder is the mock recorder for MockOpenMVGServiceInterface.
type MockOpenMVGServiceInterfaceMockRecorder struct {
	mock *MockOpenMVGServiceInterface
}

// NewMockOpenMVGServiceInterface creates a new mock instance.
func NewMockOpenMVGServiceInterface(ctrl *gomock.Controller) *MockOpenMVGServiceInterface {
	mock := &MockOpenMVGServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOpenMVGServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenMVGServiceInterface) EXPECT() *MockOpenMVGServiceInterfaceMockRecorder {
	return m.recorder
}

// PopulateTmpDir mocks base method.
func (m *MockOpenMVGServiceInterface) PopulateTmpDir() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PopulateTmpDir")
}

// PopulateTmpDir indicates an expected call of PopulateTmpDir.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) PopulateTmpDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateTmpDir", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).PopulateTmpDir))
}

// RunHealthCheck mocks base method.
func (m *MockOpenMVGServiceInterface) RunHealthCheck() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunHealthCheck")
}

// RunHealthCheck indicates an expected call of RunHealthCheck.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunHealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHealthCheck", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunHealthCheck))
}

// RunSfMComputeFeatures mocks base method.
func (m *MockOpenMVGServiceInterface) RunSfMComputeFeatures() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSfMComputeFeatures")
}

// RunSfMComputeFeatures indicates an expected call of RunSfMComputeFeatures.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunSfMComputeFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSfMComputeFeatures", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunSfMComputeFeatures))
}

// RunSfMComputeMatches mocks base method.
func (m *MockOpenMVGServiceInterface) RunSfMComputeMatches() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSfMComputeMatches")
}

// RunSfMComputeMatches indicates an expected call of RunSfMComputeMatches.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunSfMComputeMatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSfMComputeMatches", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunSfMComputeMatches))
}

// RunSfMComputeSfMDataColor mocks base method.
func (m *MockOpenMVGServiceInterface) RunSfMComputeSfMDataColor() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSfMComputeSfMDataColor")
}

// RunSfMComputeSfMDataColor indicates an expected call of RunSfMComputeSfMDataColor.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunSfMComputeSfMDataColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSfMComputeSfMDataColor", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunSfMComputeSfMDataColor))
}

// RunSfMGeometricFilter mocks base method.
func (m *MockOpenMVGServiceInterface) RunSfMGeometricFilter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSfMGeometricFilter")
}

// RunSfMGeometricFilter indicates an expected call of RunSfMGeometricFilter.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunSfMGeometricFilter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSfMGeometricFilter", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunSfMGeometricFilter))
}

// RunSfMInitImageListing mocks base method.
func (m *MockOpenMVGServiceInterface) RunSfMInitImageListing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSfMInitImageListing")
}

// RunSfMInitImageListing indicates an expected call of RunSfMInitImageListing.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunSfMInitImageListing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSfMInitImageListing", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunSfMInitImageListing))
}

// RunSfMPairGenerator mocks base method.
func (m *MockOpenMVGServiceInterface) RunSfMPairGenerator() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSfMPairGenerator")
}

// RunSfMPairGenerator indicates an expected call of RunSfMPairGenerator.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunSfMPairGenerator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSfMPairGenerator", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunSfMPairGenerator))
}

// RunSfMReconstruction mocks base method.
func (m *MockOpenMVGServiceInterface) RunSfMReconstruction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSfMReconstruction")
}

// RunSfMReconstruction indicates an expected call of RunSfMReconstruction.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) RunSfMReconstruction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSfMReconstruction", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).RunSfMReconstruction))
}

// SfMSequentialPipeline mocks base method.
func (m *MockOpenMVGServiceInterface) SfMSequentialPipeline() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SfMSequentialPipeline")
}

// SfMSequentialPipeline indicates an expected call of SfMSequentialPipeline.
func (mr *MockOpenMVGServiceInterfaceMockRecorder) SfMSequentialPipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SfMSequentialPipeline", reflect.TypeOf((*MockOpenMVGServiceInterface)(nil).SfMSequentialPipeline))
}
