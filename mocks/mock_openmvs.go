// Code generated by MockGen. DO NOT EDIT.
// Source: ./openmvs.go
//
// Generated by this command:
//
//	mockgen -source=./openmvs.go -destination=../../mocks/mock_openmvs.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenMVSServiceInterface is a mock of OpenMVSServiceInterface interface.
type MockOpenMVSServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenMVSServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockOpenMVSServiceInterfaceMockRecorder is the mock recorder for MockOpenMVSServiceInterface.
type MockOpenMVSServiceInterfaceMockRecorder struct {
	mock *MockOpenMVSServiceInterface
}

// NewMockOpenMVSServiceInterface creates a new mock instance.
func NewMockOpenMVSServiceInterface(ctrl *gomock.Controller) *MockOpenMVSServiceInterface {
	mock := &MockOpenMVSServiceInterface{ctrl: ctrl}
	mock.recorder = &MockOpenMVSServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenMVSServiceInterface) EXPECT() *MockOpenMVSServiceInterfaceMockRecorder {
	return m.recorder
}

// RunDensifyPointCloud mocks base method.
func (m *MockOpenMVSServiceInterface) RunDensifyPointCloud() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunDensifyPointCloud")
}

// RunDensifyPointCloud indicates an expected call of RunDensifyPointCloud.
func (mr *MockOpenMVSServiceInterfaceMockRecorder) RunDensifyPointCloud() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDensifyPointCloud", reflect.TypeOf((*MockOpenMVSServiceInterface)(nil).RunDensifyPointCloud))
}

// RunPipeline mocks base method.
func (m *MockOpenMVSServiceInterface) RunPipeline() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunPipeline")
}

// RunPipeline indicates an expected call of RunPipeline.
func (mr *MockOpenMVSServiceInterfaceMockRecorder) RunPipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPipeline", reflect.TypeOf((*MockOpenMVSServiceInterface)(nil).RunPipeline))
}

// RunReconstructMesh mocks base method.
func (m *MockOpenMVSServiceInterface) RunReconstructMesh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunReconstructMesh")
}

// RunReconstructMesh indicates an expected call of RunReconstructMesh.
func (mr *MockOpenMVSServiceInterfaceMockRecorder) RunReconstructMesh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReconstructMesh", reflect.TypeOf((*MockOpenMVSServiceInterface)(nil).RunReconstructMesh))
}

// RunRefineMesh mocks base method.
func (m *MockOpenMVSServiceInterface) RunRefineMesh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunRefineMesh")
}

// RunRefineMesh indicates an expected call of RunRefineMesh.
func (mr *MockOpenMVSServiceInterfaceMockRecorder) RunRefineMesh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRefineMesh", reflect.TypeOf((*MockOpenMVSServiceInterface)(nil).RunRefineMesh))
}

// RunTextureMesh mocks base method.
func (m *MockOpenMVSServiceInterface) RunTextureMesh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunTextureMesh")
}

// RunTextureMesh indicates an expected call of RunTextureMesh.
func (mr *MockOpenMVSServiceInterfaceMockRecorder) RunTextureMesh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTextureMesh", reflect.TypeOf((*MockOpenMVSServiceInterface)(nil).RunTextureMesh))
}
