// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils.go
//
// Generated by this command:
//
//	mockgen -source=./utils.go -destination=../../mocks/mock_utils.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUtilsInterface is a mock of UtilsInterface interface.
type MockUtilsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsInterfaceMockRecorder
	isgomock struct{}
}

// MockUtilsInterfaceMockRecorder is the mock recorder for MockUtilsInterface.
type MockUtilsInterfaceMockRecorder struct {
	mock *MockUtilsInterface
}

// NewMockUtilsInterface creates a new mock instance.
func NewMockUtilsInterface(ctrl *gomock.Controller) *MockUtilsInterface {
	mock := &MockUtilsInterface{ctrl: ctrl}
	mock.recorder = &MockUtilsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilsInterface) EXPECT() *MockUtilsInterfaceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockUtilsInterface) Check(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Check", e)
}

// Check indicates an expected call of Check.
func (mr *MockUtilsInterfaceMockRecorder) Check(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockUtilsInterface)(nil).Check), e)
}

// CopyFile mocks base method.
func (m *MockUtilsInterface) CopyFile(src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockUtilsInterfaceMockRecorder) CopyFile(src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockUtilsInterface)(nil).CopyFile), src, dst)
}

// DownloadFile mocks base method.
func (m *MockUtilsInterface) DownloadFile(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockUtilsInterfaceMockRecorder) DownloadFile(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockUtilsInterface)(nil).DownloadFile), url)
}

// EnsureDir mocks base method.
func (m *MockUtilsInterface) EnsureDir(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDir", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDir indicates an expected call of EnsureDir.
func (mr *MockUtilsInterfaceMockRecorder) EnsureDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDir", reflect.TypeOf((*MockUtilsInterface)(nil).EnsureDir), path)
}

// RunCommand mocks base method.
func (m *MockUtilsInterface) RunCommand(name string, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", name, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockUtilsInterfaceMockRecorder) RunCommand(name, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockUtilsInterface)(nil).RunCommand), name, args)
}
